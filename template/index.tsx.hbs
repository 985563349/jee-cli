import { useRef, useState } from 'react';
import { Button, Modal, message, Switch } from 'antd';
import { PageContainer, ProTable } from '@ant-design/pro-components'
import type { ActionType, ProColumns } from '@ant-design/pro-components';
import { PlusOutlined } from '@ant-design/icons';

import { fetch{{name}}List, create{{name}}, update{{name}}, delete{{name}} } from './service';
import type { {{name}}Model, {{name}}Query } from './service';

import {{name}}Modal from './{{name}}Model';
import type { {{name}}ModalFormData } from './{{name}}Model'

const {{name}}: React.FC = () => {
  const actionRef = useRef<ActionType>();

  const [open, setOpen] = useState(false);
  const [{{name}}Data, set{{name}}Data] = useState<{{name}}Model>();

  const handleOperate = (record?: {{name}}Model) => {
    setOpen(true);
    set{{name}}Data(record);
  };

  const handleConfirm = async ({ id, ...values }: {{name}}ModalFormData) => {
    if (id) {
      await update{{name}}(id, values);
      message.success('编辑成功！');
    } else {
      await create{{name}}(values);
      message.success('新建成功！');
    }
    setOpen(false);
    actionRef.current?.reload();
  };

  const handleChangeStatus = async (id: string, enable: boolean) => {
    await update{{name}}(id, { enable });
    message.success('编辑成功！');
    actionRef.current?.reload();
  };

  const handleDelete = ({ id }: {{name}}Model) => {
    Modal.confirm({
      title: '确认删除？',
      okType: 'danger',
      cancelText: '取消',
      okText: '确定',
      onOk: async () => {
        await delete{{name}}(id);
        message.success('删除成功!');
        actionRef.current?.reload();
      },
    });
  };

  const columns: ProColumns<{{name}}Model>[] = [
    {
      title: 'id',
      dataIndex: 'id',
    },
    {
      title: '名称',
      dataIndex: 'name',
    },
    {
      title: '启用状态',
      width: 100,
      dataIndex: 'enable',
      valueEnum: { true: { text: '启用' }, false: { text: '禁用' } },
      render: (_, { id, enable }) => (
        <Switch
          checked={enable}
          checkedChildren={'启用'}
          unCheckedChildren={'禁用'}
          onChange={(checked) => handleChangeStatus(id, checked)}
        />
      ),
    },
    {
      title: '创建时间',
      valueType: 'dateTimeRange',
      dataIndex: 'createTime',
    },
    {
      title: '操作',
      width: 120,
      dataIndex: 'option',
      valueType: 'option',
      render: (_, record) => [
        <a key="config" onClick={() => handleOperate(record)}>
          编辑
        </a>,
        <a key="delete" onClick={() => handleDelete(record)}>
          删除
        </a>,
      ],
    },
  ];

  return (
    <PageContainer>
      <ProTable<{{name}}Model, {{name}}Query>
        actionRef={actionRef}
        rowKey="id"
        search=\{{
          labelWidth: 0,
          span: 6,
        }}
        toolBarRender={() => [
          <Button type="primary" key="primary" onClick={() => handleOperate()}>
            <PlusOutlined />
            新建
          </Button>,
        ]}
        request={fetch{{name}}List}
        columns={columns}
        pagination=\{{ showQuickJumper: true }}
      />

      <{{name}}Modal
        open={open}
        initialValues={ {{~name}}Data}
        onConfirm={handleConfirm}
        onCancel={() => setOpen(false)}
      />
    </PageContainer>
  );
};

export default {{name}};
