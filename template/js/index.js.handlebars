import { useRef, useState } from 'react';
import { Button, Modal, message, Switch } from 'antd';
import { PageContainer, ProTable } from '@ant-design/pro-components';
import { PlusOutlined } from '@ant-design/icons';

import { fetch{{name}}List, create{{name}}, update{{name}}, delete{{name}} } from './service';

const {{name}} = () => {
  const actionRef = useRef();

  const [visible, setVisible] = useState(false);
  const [{{name}}Data, set{{name}}Data] = useState();

  const handleOperate = (record) => {
    setVisible(true);
    set{{name}}Data(record);
  };

  const handleConfirm = async ({ id, ...values }) => {
    if (id) {
      await update{{name}}(id, values);
      message.success('编辑成功！');
    } else {
      await create{{name}}(values);
      message.success('新增成功！');
    }
    setVisible(false);
    actionRef.current?.reload();
  };

  const handleChangeStatus = async (id, enable) => {
    await update{{name}}(id, { enable });
    message.success('编辑成功！');
    actionRef.current?.reload();
  };

  const handleDelete = ({ id }) => {
    Modal.confirm({
      title: '确认删除？',
      okType: 'danger',
      cancelText: '取消',
      okText: '确定',
      onOk: async () => {
        await delete{{name}}(id);
        message.success('删除成功!');
        actionRef.current?.reload();
      },
    });
  };

  const columns = [
    {
      title: 'id',
      dataIndex: 'id',
    },
    {
      title: '名称',
      dataIndex: 'name',
    },
    {
      title: '启用状态',
      width: 100,
      dataIndex: 'enable',
      valueEnum: { true: { text: '启用' }, false: { text: '禁用' } },
      render: (_, { id, enable }) => (
        <Switch
          checked={enable}
          checkedChildren={'启用'}
          unCheckedChildren={'禁用'}
          onChange={(checked) => handleChangeStatus(id, checked)}
        />
      ),
    },
    {
      title: '创建时间',
      valueType: 'dateTimeRange',
      dataIndex: 'createTime',
    },
    {
      title: '操作',
      width: 120,
      dataIndex: 'option',
      valueType: 'option',
      render: (_, record) => [
        <a key="config" onClick={() => handleOperate(record)}>
          编辑
        </a>,
        <a key="delete" onClick={() => handleDelete(record)}>
          删除
        </a>,
      ],
    },
  ];

  return (
    <PageContainer>
        <ProTable
          actionRef={actionRef}
          rowKey="id"
          search=\{{
            labelWidth: 0,
            span: 6,
          }}
          toolBarRender={() => [
            <Button type="primary" key="primary" onClick={() => handleOperate()}>
              <PlusOutlined />
              新建
            </Button>,
          ]}
          request={fetch{{name}}List}
          columns={columns}
          pagination=\{{ showQuickJumper: true }}
        />
    </PageContainer>
  );
};

export default {{name}};
